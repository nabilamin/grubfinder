AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  grubfinder

  Sample SAM Template for grubfinder

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'Content-Type'"
  Function:
    Timeout: 30
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON

Resources:
  # Create the sessions table in AWS
  GrubfinderSessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Grubfinder_Session
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: N
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Create the restaurant table in AWS
  GrubfindeRestaurantTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Grubfinder_Restaurant
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: N
        - AttributeName: restaurant_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: restaurant_id
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  CreateSessionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: session
      Handler: session_create.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          YELP_KEY: '{{resolve:secretsmanager:arn:aws:secretsmanager:us-east-1:600091550595:secret:yelp_key-M2asns:SecretString:key}}'
      Policies:
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn:
              arn:aws:secretsmanager:us-east-1:600091550595:secret:yelp_key-M2asns
        - DynamoDBWritePolicy:
            TableName:
              Grubfinder_Session
        - DynamoDBWritePolicy:
            TableName:
              Grubfinder_Restaurant
      Architectures:
      - x86_64
      Events:
        CreateSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /session/create
            Method: post
  
  GetSessionFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: session
      Handler: session_get.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              Grubfinder_Session
      Architectures:
      - x86_64
      Events:
        CreateSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /session/{session_id}
            Method: get

  GetSessionRestaurantsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: session/restaurant
      Handler: restaurant.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              Grubfinder_Restaurant
      Architectures:
      - x86_64
      Events:
        CreateSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /session/{session_id}/restaurant
            Method: get

  GetSessionRestaurantFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: session/restaurant
      Handler: restaurant_get.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBReadPolicy:
            TableName:
              Grubfinder_Restaurant
      Architectures:
      - x86_64
      Events:
        CreateSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /session/{session_id}/restaurant/{restaurant_id}
            Method: get
  
  SubmitVotesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: session/vote
      Handler: vote.lambda_handler
      Runtime: python3.9
      Policies:
        - DynamoDBWritePolicy:
            TableName:
              Grubfinder_Restaurant
        - DynamoDBWritePolicy:
            TableName:
              Grubfinder_Session
      Architectures:
      - x86_64
      Events:
        CreateSession:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /session/{session_id}/vote
            Method: post

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

